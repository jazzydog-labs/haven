[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "haven-api"
version = "0.1.0"
description = "Self-contained microservice exposing REST and GraphQL APIs over PostgreSQL"
readme = "README.md"
requires-python = ">=3.12"
license = "MIT"
authors = [
    { name = "Haven Team", email = "team@haven.example.com" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "fastapi>=0.109.0",
    "uvicorn[standard]>=0.27.0",
    "strawberry-graphql[fastapi]>=0.217.0",
    "sqlalchemy[asyncio]>=2.0.25",
    "asyncpg>=0.29.0",
    "alembic>=1.13.1",
    "pydantic>=2.5.3",
    "pydantic-settings>=2.1.0",
    "hydra-core>=1.3.2",
    "python-dotenv>=1.0.0",
    "httpx>=0.26.0",
    "structlog>=24.1.0",
    "python-json-logger>=2.0.7",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.4",
    "pytest-asyncio>=0.23.3",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-timeout>=2.2.0",
    "ruff>=0.1.11",
    "pyright>=1.1.348",
    "pre-commit>=3.6.0",
    "httpx>=0.26.0",
    "faker>=22.0.0",
    "aiosqlite>=0.17.0",
]

docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.5.3",
    "mkdocstrings[python]>=0.24.0",
]

[project.scripts]
haven = "haven.main:main"

[project.urls]
Homepage = "https://github.com/jazzydog-labs/haven"
Repository = "https://github.com/jazzydog-labs/haven"
Issues = "https://github.com/jazzydog-labs/haven/issues"
Documentation = "https://jazzydog-labs.github.io/haven"

# Hatch configuration
[tool.hatch.build.targets.wheel]
packages = ["src/haven"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/README.md",
    "/LICENSE",
]

[tool.hatch.envs.default]
dependencies = [
    "pytest>=7.4.4",
    "pytest-asyncio>=0.23.3",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.11",
    "pyright>=1.1.348",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
cov = "pytest --cov=haven {args:tests}"
lint = "ruff check ."
format = "ruff format ."
type = "pyright"
check = ["lint", "type", "test"]

# Testing configuration
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-fail-under=70",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/haven"]
branch = true
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__main__.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Ruff configuration
[tool.ruff]
target-version = "py312"
line-length = 100
fix = true
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "RUF",  # Ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "B905",  # `zip()` without an explicit `strict=` parameter
]

[tool.ruff.lint.isort]
known-first-party = ["haven"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["D100", "D103", "D104"]  # Missing docstrings in tests

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# Pyright configuration
[tool.pyright]
include = ["src", "tests"]
exclude = [
    "**/node_modules",
    "**/__pycache__",
    "**/.*",
    "build",
    "dist",
]
typeCheckingMode = "strict"
pythonVersion = "3.12"
pythonPlatform = "All"
reportMissingImports = true
reportMissingTypeStubs = false
reportPrivateImportUsage = false
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true
reportOptionalSubscript = true
reportOptionalMemberAccess = true
reportOptionalCall = true
reportOptionalIterable = true
reportOptionalContextManager = true
reportOptionalOperand = true
reportUnnecessaryTypeIgnoreComment = true